ARG OPENSUSE_VERSION=15.2

FROM opensuse/leap:${OPENSUSE_VERSION}  as base_build

ARG TF_SERVING_VERSION_GIT_BRANCH=master
ARG TF_SERVING_VERSION_GIT_COMMIT=head
ARG BAZEL_VERSION=2.0.0

LABEL maintainer="Inlyse UG (haftungsbeschränkt) <info@inlyse.com>"
LABEL org.opencontainers.image.title="Inlyse Tensorflow Serving Container Devel"
LABEL org.opencontainers.image.authors="Inlyse UG (haftungsbeschränkt)"
LABEL org.opencontainers.image.source="https://github.com/inlyse/inlyse-docker-tensorflow-serving"
LABEL org.opencontainers.image.url="https://hub.docker.com/repository/docker/inlyse/tensorflow-serving"
LABEL org.opencontainers.image.version="1.0.0-devel"
LABEL org.opencontainers.image.description="Image containing tensorflow serving"
LABEL org.google.tensorflow.serving.branch=${TF_SERVING_VERSION_GIT_BRANCH}
LABEL org.google.tensorflow.serving.commit=${TF_SERVING_VERSION_GIT_COMMIT}
LABEL org.opensuse.version="15.2"


RUN set -eux; \
    zypper -n ar  https://provo-mirror.opensuse.org/repositories/science:/machinelearning/openSUSE_Leap_15.2/science:machinelearning.repo \
    && zypper --gpg-auto-import-keys -n ref && zypper --no-refresh -n up \
    && zypper -n install -t pattern devel_basis \
    && zypper -n in \
        automake \
        gcc-c++ \
        llvm \
        which \
        ca-certificates \
        curl \
        git \
        libcurl-devel \
        libpng16-devel \
        libfreetype6 \
        libtool \
        libzmq5 \
        mlocate \
        java-1_8_0-openjdk \
        java-1_8_0-openjdk-headless \
        pkg-config \
        python \
        python-devel \
        python2-pip \
        python2-future \
        python2-numpy \
        python2-requests \
        python2-mock \
        python2-grpcio \
        python2-h5py \
        python2-Keras-Applications \
        python2-Keras-Preprocessing \
        python2-wheel \
        python3 \
        python3-devel \
        python3-pip \
        python3-future \
        python3-numpy \
        python3-requests \
        python3-mock \
        python3-grpcio \
        python3-h5py \
        python3-Keras-Applications \
        python3-Keras-Preprocessing \
        python3-wheel \
        swig \
        unzip \
        wget \
        zip \
        zlib-devel \
    && zypper clean -a

RUN pip install --upgrade pip setuptools

# Set up Bazel
WORKDIR /
RUN mkdir /bazel && \
    cd /bazel && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh && \
    cd / && \
    rm -f /bazel/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh

# Download TF Serving sources (optionally at specific commit).
WORKDIR /tensorflow-serving
RUN git clone --branch=${TF_SERVING_VERSION_GIT_BRANCH} https://github.com/tensorflow/serving . && \
    git remote add upstream https://github.com/tensorflow/serving.git && \
    if [ "${TF_SERVING_VERSION_GIT_COMMIT}" != "head" ]; then git checkout ${TF_SERVING_VERSION_GIT_COMMIT} ; fi


FROM base_build as binary_build
# Build, and install TensorFlow Serving
ARG TF_SERVING_BUILD_OPTIONS="--config=nativeopt"
RUN echo "Building with build options: ${TF_SERVING_BUILD_OPTIONS}"
ARG TF_SERVING_BAZEL_OPTIONS=""
RUN echo "Building with Bazel options: ${TF_SERVING_BAZEL_OPTIONS}"

RUN bazel build --color=yes --curses=yes \
    ${TF_SERVING_BAZEL_OPTIONS} \
    --verbose_failures \
    --output_filter=DONT_MATCH_ANYTHING \
    ${TF_SERVING_BUILD_OPTIONS} \
    tensorflow_serving/model_servers:tensorflow_model_server && \
    cp bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server \
    /usr/local/bin/

# Build and install TensorFlow Serving API
RUN bazel build --color=yes --curses=yes \
    ${TF_SERVING_BAZEL_OPTIONS} \
    --verbose_failures \
    --output_filter=DONT_MATCH_ANYTHING \
    ${TF_SERVING_BUILD_OPTIONS} \
    tensorflow_serving/tools/pip_package:build_pip_package && \
    bazel-bin/tensorflow_serving/tools/pip_package/build_pip_package \
    /tmp/pip && \
    pip --no-cache-dir install --upgrade \
    /tmp/pip/tensorflow_serving_api-*.whl && \
    rm -rf /tmp/pip

FROM binary_build as clean_build
# Clean up Bazel cache when done.
RUN bazel clean --expunge --color=yes && \
    rm -rf /root/.cache
CMD ["/bin/bash"]
